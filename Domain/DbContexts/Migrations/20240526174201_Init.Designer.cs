// <auto-generated />
using System;
using Domain.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.DbContexts.Migrations
{
    [DbContext(typeof(BettingDbContext))]
    [Migration("20240526174201_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Features.Bets.Entities.BetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BetId")
                        .HasColumnType("int")
                        .HasColumnName("bet_id");

                    b.Property<bool>("IsLive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_live");

                    b.Property<int>("MatchId")
                        .HasColumnType("int")
                        .HasColumnName("match_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("bets", (string)null);
                });

            modelBuilder.Entity("Domain.Features.Events.Entities.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsLive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_live");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Domain.Features.Matches.Entities.MatchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int>("MatchId")
                        .HasColumnType("int")
                        .HasColumnName("match_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MatchId");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("Domain.Features.Odds.Entities.OddEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BetId")
                        .HasColumnType("int")
                        .HasColumnName("bet_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("OddId")
                        .HasColumnType("int")
                        .HasColumnName("odd_id");

                    b.Property<decimal>("SpecialValue")
                        .HasMaxLength(255)
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("special_value");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.ToTable("odds", (string)null);
                });

            modelBuilder.Entity("Domain.Features.Sports.Entities.SportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("SportId")
                        .HasColumnType("int")
                        .HasColumnName("sport_id");

                    b.HasKey("Id");

                    b.ToTable("sports", (string)null);
                });

            modelBuilder.Entity("Domain.Features.Bets.Entities.BetEntity", b =>
                {
                    b.HasOne("Domain.Features.Matches.Entities.MatchEntity", "Match")
                        .WithMany("Bets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Domain.Features.Events.Entities.EventEntity", b =>
                {
                    b.HasOne("Domain.Features.Sports.Entities.SportEntity", "Sport")
                        .WithMany("Events")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Domain.Features.Matches.Entities.MatchEntity", b =>
                {
                    b.HasOne("Domain.Features.Events.Entities.EventEntity", "Event")
                        .WithMany("Matches")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Features.Odds.Entities.OddEntity", b =>
                {
                    b.HasOne("Domain.Features.Bets.Entities.BetEntity", "Bet")
                        .WithMany("Odds")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");
                });

            modelBuilder.Entity("Domain.Features.Bets.Entities.BetEntity", b =>
                {
                    b.Navigation("Odds");
                });

            modelBuilder.Entity("Domain.Features.Events.Entities.EventEntity", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Domain.Features.Matches.Entities.MatchEntity", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("Domain.Features.Sports.Entities.SportEntity", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
